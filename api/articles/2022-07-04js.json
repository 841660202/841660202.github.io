{"title":"javascript 代码","uid":"b372a96513accffd7382c09ef2a349f7","slug":"2022-07-04js","date":"2022-07-04T07:31:24.000Z","updated":"2022-07-06T02:37:23.395Z","comments":true,"path":"api/articles/2022-07-04js.json","keywords":null,"cover":[],"content":"<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><img src=\"https://img-blog.csdnimg.cn/img_convert/afb80e39ce7684d6330fdc66b0873abd.gif\" width=300 />\n\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><img src=\"https://img-blog.csdnimg.cn/img_convert/76339a259488423b03370e381ca5edb0.gif\" width=300/>\n\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><img src=\"https://img-blog.csdnimg.cn/img_convert/c894e22dcc48b03559e3087627e3dbb8.gif\" width=300/>\n\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><img src=\"https://img-blog.csdnimg.cn/956f63eccd75480791c85edd8ce91658.gif\" width=300/>\n\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><img src=\"http://t-blog-images.aijs.top/img/1940317-acc6c6f16b096794.gif\" />\n\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><img src=\"https://img-blog.csdnimg.cn/img_convert/4ad3b539bee9bfe9a6acdba476ceed78.gif\" width=300 />\n\n<img src=\"http://t-blog-images.aijs.top/img/20220704153839.webp\" />\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;*\n快排是冒泡的一种改进，基于分治思想\n*&#x2F;\nconst arr2 &#x3D; [2, 44, 1, 0, -22, 56, -78];\n\nfunction quickSort2(arr) &#123;\n  if (arr.length &#x3D;&#x3D;&#x3D; 0) return arr;\n  const pivot &#x3D; arr.pop(); &#x2F;&#x2F; 使用最后一个元素当作基准数\n  const left &#x3D; [],\n    right &#x3D; [];\n  for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;\n    if (arr[i] &lt; pivot) left.push(arr[i]); &#x2F;&#x2F; 小于基准数则放到left\n    else right.push(arr[i]); &#x2F;&#x2F; 大于基准数则放到right\n  &#125;\n  &#x2F;&#x2F; 合并left的快排结果，基准数和右侧的快排结果\n  return quickSort2(left).concat(pivot, quickSort2(right));\n&#125;\n\nconsole.log(quickSort2(arr2));</code></pre>\n\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function deepClone(obj) &#123;\n  let result;\n  if (typeof obj &#x3D;&#x3D; &quot;object&quot;) &#123;\n    result &#x3D; isArray(obj) ? [] : &#123;&#125;; &#x2F;&#x2F; 空对象接收\n    for (let i in obj) &#123;\n      result[i] &#x3D;\n        isObject(obj[i]) || isArray(obj[i]) ? deepClone(obj[i]) : obj[i];\n    &#125;\n  &#125; else &#123;\n    result &#x3D; obj;\n  &#125;\n  return result;\n&#125;\n\nfunction isObject(obj) &#123;\n  return Object.prototype.toString.call(obj) &#x3D;&#x3D; &quot;[object Object]&quot;;\n&#125;\n\nfunction isArray(obj) &#123;\n  return Object.prototype.toString.call(obj) &#x3D;&#x3D; &quot;[object Array]&quot;;\n&#125;</code></pre>\n\n<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; 去抖动原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时.\n&#x2F;&#x2F; 方法1\nconst debounce &#x3D; function (fn, delay) &#123;\n  let timer &#x3D; null; &#x2F;&#x2F; 闭包维护一个timer\n  return (...args) &#x3D;&gt; &#123;\n    clearTimeout(timer);\n    timer &#x3D; setTimeout(() &#x3D;&gt; &#123;\n      fn?.apply(this, args);\n    &#125;, delay);\n  &#125;;\n&#125;;\n\n&#x2F;&#x2F; 测试\n\nlet biu &#x3D; function () &#123;\n  console.log(&quot;biu biu biu&quot;, new Date().getTime());\n&#125;;\nlet boom &#x3D; function () &#123;\n  console.log(&quot;boom boom boom&quot;, new Date().getTime());\n&#125;;\n\nvar a &#x3D; setInterval(debounce(biu, 500), 1000);\nvar b &#x3D; setInterval(debounce(boom, 2000), 1000);\nsetTimeout(() &#x3D;&gt; &#123;\n  clearInterval(a);\n  clearInterval(b);\n&#125;, 10000);</code></pre>\n\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">const throttle &#x3D; (fn, delay &#x3D; 500) &#x3D;&gt; &#123;\n  let allow &#x3D; true;\n\n  return (...args) &#x3D;&gt; &#123;\n    if (!allow) return;\n    allow &#x3D; false;\n\n    setTimeout(() &#x3D;&gt; &#123;\n      fn.apply(this, args);\n      allow &#x3D; true;\n    &#125;, delay);\n  &#125;;\n&#125;;</code></pre>\n\n<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h2><ul>\n<li>语法</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function.call(thisArg, arg1, arg2, ...)\n</code></pre>\n\n<ul>\n<li>参数<br><code>thisArg</code>可选的。在 function 函数运行时使用的 this 值。请注意，this 可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象，原始值会被包装。<br><code>arg1, arg2, ...</code> 指定的参数列表。</li>\n<li>返回值<br>使用调用者提供的 this 值和参数调用该函数的返回值。若该方法没有返回值，则返回 undefined。</li>\n<li>实现原理</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Function.prototype.myCall &#x3D; function (context) &#123;\n  var context &#x3D; context || window;\n  context.fn &#x3D; this;\n\n  var args &#x3D; [];\n  for (var i &#x3D; 1, len &#x3D; arguments.length; i &lt; len; i++) &#123;\n    args.push(&quot;arguments[&quot; + i + &quot;]&quot;);\n  &#125;\n  var result &#x3D; eval(&quot;context.fn(&quot; + args + &quot;)&quot;);\n\n  delete context.fn;\n\n  return result;\n&#125;;</code></pre>\n\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><ul>\n<li>语法</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">apply(thisArg);\napply(thisArg, argsArray);</code></pre>\n\n<ul>\n<li>参数</li>\n</ul>\n<p><code>thisArg</code>在 func 函数运行时使用的 this 值。请注意，this 可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象，原始值会被包装。</p>\n<p><code>argsArray</code> 可选,一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 func 函数。如果该参数的值为 null 或 undefined，则表示不需要传入任何参数。从 ECMAScript 5 开始可以使用类数组对象。浏览器兼容性请参阅本文底部内容。</p>\n<ul>\n<li>返回值</li>\n</ul>\n<p>调用有指定 this 值和参数的函数的结果。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Function.prototype.myApply &#x3D; function (context, arr) &#123;\n  var context &#x3D; context || window;\n  context.fn &#x3D; this;\n\n  var result;\n\n  if (!arr) &#123;\n    &#x2F;&#x2F; 没有参数\n    result &#x3D; context.fn();\n  &#125; else &#123;\n    &#x2F;&#x2F; 有参数\n    var args &#x3D; [];\n\n    for (let i &#x3D; 0, len &#x3D; arr.length; i &lt; len; i++) &#123;\n      args.push(&quot;arr[&quot; + i + &quot;]&quot;);\n    &#125;\n\n    result &#x3D; eval(&quot;context.fn(&quot; + args + &quot;)&quot;);\n  &#125;\n\n  delete context.fn;\n  return result;\n&#125;;</code></pre>\n\n<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><h3 id=\"Promise-allSettle\"><a href=\"#Promise-allSettle\" class=\"headerlink\" title=\"Promise.allSettle\"></a>Promise.allSettle</h3><h2 id=\"Promise-any\"><a href=\"#Promise-any\" class=\"headerlink\" title=\"Promise.any\"></a>Promise.any</h2><h2 id=\"限制并发数量\"><a href=\"#限制并发数量\" class=\"headerlink\" title=\"限制并发数量\"></a>限制并发数量</h2><h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><h2 id=\"红包算法\"><a href=\"#红包算法\" class=\"headerlink\" title=\"红包算法\"></a>红包算法</h2><h2 id=\"括号匹配\"><a href=\"#括号匹配\" class=\"headerlink\" title=\"括号匹配\"></a>括号匹配</h2><h2 id=\"将奇数排在前面，偶数排在后面。要求时间复杂度-O-n-。空间复杂度-O-1-（不能用-splice）\"><a href=\"#将奇数排在前面，偶数排在后面。要求时间复杂度-O-n-。空间复杂度-O-1-（不能用-splice）\" class=\"headerlink\" title=\"将奇数排在前面，偶数排在后面。要求时间复杂度 O(n)。空间复杂度 O(1)（不能用 splice）\"></a>将奇数排在前面，偶数排在后面。要求时间复杂度 O(n)。空间复杂度 O(1)（不能用 splice）</h2><h2 id=\"数组转树结构\"><a href=\"#数组转树结构\" class=\"headerlink\" title=\"数组转树结构\"></a>数组转树结构</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var testAry &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar newAry &#x3D; [];\n\ntestAry.forEach((item, i) &#x3D;&gt; &#123;\n  let n &#x3D; Number(item);\n  if (n % 2 &#x3D;&#x3D; 0) &#123;\n    newAry.push(n);\n  &#125; else &#123;\n    newAry.unshift(n);\n  &#125;\n&#125;);\n\nconsole.log(newAry); &#x2F;&#x2F;[&quot;9&quot;,&quot;7&quot;,&quot;5&quot;,&quot;3&quot;,&quot;1&quot;,&quot;2&quot;,&quot;4&quot;,&quot;6&quot;]</code></pre>\n\n<h2 id=\"解析-URL-中所有的部分\"><a href=\"#解析-URL-中所有的部分\" class=\"headerlink\" title=\"解析 URL 中所有的部分\"></a>解析 URL 中所有的部分</h2><h2 id=\"实现一个-compare-函数，比较两个对象是否相同\"><a href=\"#实现一个-compare-函数，比较两个对象是否相同\" class=\"headerlink\" title=\"实现一个 compare 函数，比较两个对象是否相同\"></a>实现一个 compare 函数，比较两个对象是否相同</h2><p><a href=\"https://www.jianshu.com/p/0828ded57b19#:~:text=%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AF%94%E8%BE%83-,%E6%96%B9%E6%B3%95%E4%B8%89%EF%BC%9A,-//%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%B7%B1%E5%BA%A6\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F;定义一个深度对比方法\nfunction deepCompare(x, y) &#123;\n  &#x2F;&#x2F;声明所需变量\n  var i, l, leftChain, rightChain;\n  &#x2F;&#x2F;具体对比函数\n  function compare2Objects(x, y) &#123;\n    var p;\n\n    &#x2F;&#x2F; 记得 NaN &#x3D;&#x3D;&#x3D; NaN 返回 false\n    &#x2F;&#x2F; isNaN(undefined) returns true\n    if (\n      isNaN(x) &amp;&amp;\n      isNaN(y) &amp;&amp;\n      typeof x &#x3D;&#x3D;&#x3D; &quot;number&quot; &amp;&amp;\n      typeof y &#x3D;&#x3D;&#x3D; &quot;number&quot;\n    ) &#123;\n      return true;\n    &#125;\n\n    &#x2F;&#x2F; Compare primitives and functions.\n    &#x2F;&#x2F; Check if both arguments link to the same object.\n    &#x2F;&#x2F; Especially useful on the step where we compare prototypes\n    if (x &#x3D;&#x3D;&#x3D; y) &#123;\n      return true;\n    &#125;\n\n    &#x2F;&#x2F; Works in case when functions are created in constructor.\n    &#x2F;&#x2F; Comparing dates is a common scenario. Another built-ins?\n    &#x2F;&#x2F; We can even handle functions passed across iframes\n    if (\n      (typeof x &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; typeof y &#x3D;&#x3D;&#x3D; &quot;function&quot;) ||\n      (x instanceof Date &amp;&amp; y instanceof Date) ||\n      (x instanceof RegExp &amp;&amp; y instanceof RegExp) ||\n      (x instanceof String &amp;&amp; y instanceof String) ||\n      (x instanceof Number &amp;&amp; y instanceof Number)\n    ) &#123;\n      return x.toString() &#x3D;&#x3D;&#x3D; y.toString();\n    &#125;\n\n    &#x2F;&#x2F; At last checking prototypes as good as we can\n    if (!(x instanceof Object &amp;&amp; y instanceof Object)) &#123;\n      return false;\n    &#125;\n\n    if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) &#123;\n      return false;\n    &#125;\n\n    if (x.constructor !&#x3D;&#x3D; y.constructor) &#123;\n      return false;\n    &#125;\n\n    if (x.prototype !&#x3D;&#x3D; y.prototype) &#123;\n      return false;\n    &#125;\n\n    &#x2F;&#x2F; Check for infinitive linking loops\n    if (leftChain.indexOf(x) &gt; -1 || rightChain.indexOf(y) &gt; -1) &#123;\n      return false;\n    &#125;\n\n    &#x2F;&#x2F; Quick checking of one object being a subset of another.\n    &#x2F;&#x2F; todo: cache the structure of arguments[0] for performance\n    for (p in y) &#123;\n      if (y.hasOwnProperty(p) !&#x3D;&#x3D; x.hasOwnProperty(p)) &#123;\n        return false;\n      &#125; else if (typeof y[p] !&#x3D;&#x3D; typeof x[p]) &#123;\n        return false;\n      &#125;\n    &#125;\n\n    for (p in x) &#123;\n      if (y.hasOwnProperty(p) !&#x3D;&#x3D; x.hasOwnProperty(p)) &#123;\n        return false;\n      &#125; else if (typeof y[p] !&#x3D;&#x3D; typeof x[p]) &#123;\n        return false;\n      &#125;\n\n      switch (typeof x[p]) &#123;\n        case &quot;object&quot;:\n        case &quot;function&quot;:\n          leftChain.push(x);\n          rightChain.push(y);\n\n          if (!compare2Objects(x[p], y[p])) &#123;\n            return false;\n          &#125;\n\n          leftChain.pop();\n          rightChain.pop();\n          break;\n\n        default:\n          if (x[p] !&#x3D;&#x3D; y[p]) &#123;\n            return false;\n          &#125;\n          break;\n      &#125;\n    &#125;\n\n    return true;\n  &#125;\n\n  if (arguments.length &lt; 1) &#123;\n    return true; &#x2F;&#x2F;Die silently? Don&#39;t know how to handle such case, please help...\n    &#x2F;&#x2F; throw &quot;Need two or more arguments to compare&quot;;\n  &#125;\n\n  for (i &#x3D; 1, l &#x3D; arguments.length; i &lt; l; i++) &#123;\n    leftChain &#x3D; []; &#x2F;&#x2F;Todo: this can be cached\n    rightChain &#x3D; [];\n\n    if (!compare2Objects(arguments[0], arguments[i])) &#123;\n      return false;\n    &#125;\n  &#125;\n\n  return true;\n&#125;</code></pre>\n\n<h2 id=\"使用-es5-实现-es6-的-let-关键字\"><a href=\"#使用-es5-实现-es6-的-let-关键字\" class=\"headerlink\" title=\"使用 es5 实现 es6 的 let 关键字\"></a>使用 es5 实现 es6 的 let 关键字</h2><h2 id=\"中划线转大写\"><a href=\"#中划线转大写\" class=\"headerlink\" title=\"中划线转大写\"></a>中划线转大写</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var str &#x3D; &quot;get-user-by-id&quot;;\n\nvar f &#x3D; function (s) &#123;\n  return s.replace(&#x2F;-\\w&#x2F;g, function (x) &#123;\n    return x.slice(1).toUpperCase();\n  &#125;);\n&#125;;</code></pre>\n\n<h2 id=\"柯里化\"><a href=\"#柯里化\" class=\"headerlink\" title=\"柯里化\"></a>柯里化</h2><h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function myNew() &#123;\n  let obj &#x3D; new Object();\n\n  let func &#x3D; [].shift.call(arguments); &#x2F;&#x2F;出列，获取第一个参数\n  obj.__proto__ &#x3D; func.prototype; &#x2F;&#x2F;proto指向原型\n\n  func.apply(obj, arguments); &#x2F;&#x2F;让obj执行func函数\n\n  return obj;\n&#125;</code></pre>\n\n<h2 id=\"Object-create\"><a href=\"#Object-create\" class=\"headerlink\" title=\"Object.create\"></a>Object.create</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function myCreate(obj) &#123;\n  let F &#x3D; function () &#123;&#125;;\n  F.prototype &#x3D; obj;\n  return new F();\n&#125;</code></pre>\n\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function instance_of(L, R) &#123;\n  var O &#x3D; R.prototype; &#x2F;&#x2F; 取R的显示原型\n  L &#x3D; L.__proto__; &#x2F;&#x2F; 取L的隐式原型\n\n  while (true) &#123;\n    &#x2F;&#x2F; 死循环，结束条件：要么找到，要么没找到\n    if (L &#x3D;&#x3D;&#x3D; null) return false;\n\n    if (O &#x3D;&#x3D;&#x3D; L) &#123;\n      &#x2F;&#x2F; 这里重点：当O严格等于L时，返回true\n      return true;\n    &#125;\n    L &#x3D; L.__proto__;\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"洋葱模型\"><a href=\"#洋葱模型\" class=\"headerlink\" title=\"洋葱模型\"></a>洋葱模型</h2><h2 id=\"实现-event-bus\"><a href=\"#实现-event-bus\" class=\"headerlink\" title=\"实现 event bus\"></a>实现 event bus</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">class EventBus &#123;\n  constructor() &#123;\n    this.events &#x3D; &#123;&#125;;\n  &#125;\n  &#x2F;&#x2F; 监听，给对象添加方法\n  on(name, callback) &#123;\n    const &#123; events &#125; &#x3D; this;\n    if (!events[name]) &#123;\n      events[name] &#x3D; [];\n    &#125;\n    events[name].push(callback);\n  &#125;\n  &#x2F;&#x2F; 取出来执行\n  emit(name, ...args) &#123;\n    const handlers &#x3D; this.events[name];\n    handlers &amp;&amp;\n      handlers.forEach((fn) &#x3D;&gt; &#123;\n        fn.apply(this, args);\n      &#125;);\n  &#125;\n  &#x2F;&#x2F; 解除\n  off(name, callback) &#123;\n    const &#123; events &#125; &#x3D; this;\n    if (!events[name]) return;\n    events[name] &#x3D; events[name].filter((fn) &#x3D;&gt; fn !&#x3D;&#x3D; callback);\n  &#125;\n  &#x2F;&#x2F;  用完立马、解除\n  once(name, callback) &#123;\n    const handler &#x3D; function () &#123;\n      callback.apply(this, arguments);\n      this.off(name, handler);\n    &#125;;\n    this.on(name, handler);\n  &#125;\n  &#x2F;&#x2F; 事件清空\n  clear() &#123;\n    this.events &#x3D; &#123;&#125;;\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"leecode\"><a href=\"#leecode\" class=\"headerlink\" title=\"leecode\"></a>leecode</h2><h3 id=\"螺旋矩阵\"><a href=\"#螺旋矩阵\" class=\"headerlink\" title=\"螺旋矩阵\"></a>螺旋矩阵</h3><h3 id=\"大数相加\"><a href=\"#大数相加\" class=\"headerlink\" title=\"大数相加\"></a>大数相加</h3><h3 id=\"找出出现次数最多的英语单词\"><a href=\"#找出出现次数最多的英语单词\" class=\"headerlink\" title=\"找出出现次数最多的英语单词\"></a>找出出现次数最多的英语单词</h3><h3 id=\"节点倒序（将-ul-id-x3D-list，将-ul-节点下的-10000-个-li-节点倒序。考虑性能。）\"><a href=\"#节点倒序（将-ul-id-x3D-list，将-ul-节点下的-10000-个-li-节点倒序。考虑性能。）\" class=\"headerlink\" title=\"节点倒序（将 ul.id&#x3D;list，将 ul 节点下的 10000 个 li 节点倒序。考虑性能。）\"></a>节点倒序（将 ul.id&#x3D;list，将 ul 节点下的 10000 个 li 节点倒序。考虑性能。）</h3><h3 id=\"实现一个函数计算-“1-12-31-100-93”\"><a href=\"#实现一个函数计算-“1-12-31-100-93”\" class=\"headerlink\" title=\"实现一个函数计算 “1+12-31+100-93”\"></a>实现一个函数计算 “1+12-31+100-93”</h3><h3 id=\"判断链表是否有环\"><a href=\"#判断链表是否有环\" class=\"headerlink\" title=\"判断链表是否有环\"></a>判断链表是否有环</h3><h3 id=\"爬楼梯\"><a href=\"#爬楼梯\" class=\"headerlink\" title=\"爬楼梯\"></a>爬楼梯</h3><h3 id=\"删除单向链表中的某个节点\"><a href=\"#删除单向链表中的某个节点\" class=\"headerlink\" title=\"删除单向链表中的某个节点\"></a>删除单向链表中的某个节点</h3><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.cnblogs.com/pangqianjin/p/14998643.html\" target=\"_blank\" >JavaScript 手写几种常见的排序算法：冒泡、选择、插入、希尔、归并、快排</a><br><a href=\"https://blog.csdn.net/qq_44433261/article/details/117235740\" target=\"_blank\" >排序动画</a><br><a href=\"https://wenku.baidu.com/view/7f84552a6f85ec3a87c24028915f804d2b16878c.html\" target=\"_blank\" >分治思想——精选推荐</a><br><a href=\"https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%B3%95/9763353?fr=aladdin\" target=\"_blank\" >归并排序法 百度百科</a><br><a href=\"https://blog.csdn.net/Sherlook_Holmes/article/details/120584469\" target=\"_blank\" >（含动画演示）搞懂归并排序 一学就会</a></p>\n","text":"排序冒泡排序 选择排序 插入排序 归并排序 希尔排序 快速排序 &#x2F;* 快排是冒泡的一种改进，基于分治思想 *&#x2F; const arr2 &#x3D; [2, 44, 1, 0, -22, 56, -78]; function quickSort2(arr) &#...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"面试","slug":"面试","count":9,"path":"api/categories/面试.json"}],"tags":[{"name":"面试","slug":"面试","count":6,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">冒泡排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">选择排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">插入排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">归并排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">希尔排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">快速排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">深拷贝</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%B2%E6%8A%96\"><span class=\"toc-text\">防抖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">节流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#call\"><span class=\"toc-text\">call</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#apply\"><span class=\"toc-text\">apply</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#bind\"><span class=\"toc-text\">bind</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Promise\"><span class=\"toc-text\">Promise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Promise-all\"><span class=\"toc-text\">Promise.all</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Promise-race\"><span class=\"toc-text\">Promise.race</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Promise-allSettle\"><span class=\"toc-text\">Promise.allSettle</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Promise-any\"><span class=\"toc-text\">Promise.any</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%90%E5%88%B6%E5%B9%B6%E5%8F%91%E6%95%B0%E9%87%8F\"><span class=\"toc-text\">限制并发数量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D\"><span class=\"toc-text\">数组去重</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%A2%E5%8C%85%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">红包算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">括号匹配</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%A5%87%E6%95%B0%E6%8E%92%E5%9C%A8%E5%89%8D%E9%9D%A2%EF%BC%8C%E5%81%B6%E6%95%B0%E6%8E%92%E5%9C%A8%E5%90%8E%E9%9D%A2%E3%80%82%E8%A6%81%E6%B1%82%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6-O-n-%E3%80%82%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6-O-1-%EF%BC%88%E4%B8%8D%E8%83%BD%E7%94%A8-splice%EF%BC%89\"><span class=\"toc-text\">将奇数排在前面，偶数排在后面。要求时间复杂度 O(n)。空间复杂度 O(1)（不能用 splice）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数组转树结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90-URL-%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E9%83%A8%E5%88%86\"><span class=\"toc-text\">解析 URL 中所有的部分</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-compare-%E5%87%BD%E6%95%B0%EF%BC%8C%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C\"><span class=\"toc-text\">实现一个 compare 函数，比较两个对象是否相同</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-es5-%E5%AE%9E%E7%8E%B0-es6-%E7%9A%84-let-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">使用 es5 实现 es6 的 let 关键字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E5%88%92%E7%BA%BF%E8%BD%AC%E5%A4%A7%E5%86%99\"><span class=\"toc-text\">中划线转大写</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%AF%E9%87%8C%E5%8C%96\"><span class=\"toc-text\">柯里化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#new\"><span class=\"toc-text\">new</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-create\"><span class=\"toc-text\">Object.create</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#instanceof\"><span class=\"toc-text\">instanceof</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">洋葱模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-event-bus\"><span class=\"toc-text\">实现 event bus</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#leecode\"><span class=\"toc-text\">leecode</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5\"><span class=\"toc-text\">螺旋矩阵</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0\"><span class=\"toc-text\">大数相加</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%BE%E5%87%BA%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D\"><span class=\"toc-text\">找出出现次数最多的英语单词</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8A%82%E7%82%B9%E5%80%92%E5%BA%8F%EF%BC%88%E5%B0%86-ul-id-x3D-list%EF%BC%8C%E5%B0%86-ul-%E8%8A%82%E7%82%B9%E4%B8%8B%E7%9A%84-10000-%E4%B8%AA-li-%E8%8A%82%E7%82%B9%E5%80%92%E5%BA%8F%E3%80%82%E8%80%83%E8%99%91%E6%80%A7%E8%83%BD%E3%80%82%EF%BC%89\"><span class=\"toc-text\">节点倒序（将 ul.id&#x3D;list，将 ul 节点下的 10000 个 li 节点倒序。考虑性能。）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97-%E2%80%9C1-12-31-100-93%E2%80%9D\"><span class=\"toc-text\">实现一个函数计算 “1+12-31+100-93”</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF\"><span class=\"toc-text\">判断链表是否有环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%88%AC%E6%A5%BC%E6%A2%AF\"><span class=\"toc-text\">爬楼梯</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">删除单向链表中的某个节点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"企业微信文件预览","uid":"74208bc76768a419347d0ad3e15c33b0","slug":"2022-07-05wxfile","date":"2022-07-05T15:16:30.000Z","updated":"2022-07-05T16:07:40.004Z","comments":true,"path":"api/articles/2022-07-05wxfile.json","keywords":null,"cover":[],"text":"企业微信文件预览试错 1: const fileName &#x3D; &quot;xxxxx.jpeg&quot;; &#x2F;&#x2F; 举个例子 downloadAttachment(downloadUrl).then((res) &#x3D;&gt; &#123; v...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"企业微信","slug":"企业微信","count":2,"path":"api/categories/企业微信.json"}],"tags":[{"name":"企业微信","slug":"企业微信","count":2,"path":"api/tags/企业微信.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"授权与校验场景「简聊」","uid":"22d71efeaa5b73e832334cf42551f026","slug":"2022-07-01auth","date":"2022-07-01T09:12:26.000Z","updated":"2022-07-01T09:58:01.147Z","comments":true,"path":"api/articles/2022-07-01auth.json","keywords":null,"cover":null,"text":"最简单用变量，模拟数据 session + cookie每个用户对应一个会话 SSO 1 session + redis + cookie 觉得有点奇葩，第二份核心项目遇到 jwt + redis第二份非核心项目遇到 以下是一般公司常用的方式，面试的时候，大家都在唠这个 SSO ...","link":"","photos":[],"count_time":{"symbolsCount":914,"symbolsTime":"1 mins."},"categories":[{"name":"auth","slug":"auth","count":1,"path":"api/categories/auth.json"}],"tags":[{"name":"auth","slug":"auth","count":1,"path":"api/tags/auth.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}